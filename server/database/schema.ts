import { getConnection } from './connection.js';

export async function createTables() {
  let connection;
  
  try {
    connection = await getConnection();
    
    console.log('Creating database tables...');

    // Users table for authentication and profiles
    await connection.execute(`
      CREATE TABLE users (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(255) NOT NULL,
        username VARCHAR2(100) UNIQUE,
        email VARCHAR2(255) UNIQUE NOT NULL,
        password VARCHAR2(255) NOT NULL,
        employee_id VARCHAR2(50),
        role VARCHAR2(50) NOT NULL,
        department VARCHAR2(100),
        total_leaves NUMBER DEFAULT 20,
        used_leaves NUMBER DEFAULT 0,
        week_offs NUMBER DEFAULT 52,
        used_week_offs NUMBER DEFAULT 0,
        status VARCHAR2(20) DEFAULT 'Offline',
        last_login TIMESTAMP,
        last_logout TIMESTAMP,
        registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Users table created');

    // Daily tasks table
    await connection.execute(`
      CREATE TABLE daily_tasks (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        title VARCHAR2(500) NOT NULL,
        description CLOB,
        product VARCHAR2(50) NOT NULL,
        issue_type VARCHAR2(50) NOT NULL,
        status VARCHAR2(50) DEFAULT 'pending',
        priority VARCHAR2(20),
        developer VARCHAR2(255),
        uat_person VARCHAR2(255),
        production_person VARCHAR2(255),
        reported_date DATE,
        fixed_date DATE,
        closed_date DATE,
        task_date DATE DEFAULT SYSDATE,
        time_info VARCHAR2(255),
        created_by NUMBER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Daily tasks table created');

    // Shift handovers table
    await connection.execute(`
      CREATE TABLE shift_handovers (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        handover_by VARCHAR2(255) NOT NULL,
        shift_from VARCHAR2(50),
        shift_to VARCHAR2(50),
        handover_text CLOB,
        handover_date DATE DEFAULT SYSDATE,
        saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_by NUMBER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Shift handovers table created');

    // Handover points table (one-to-many relationship)
    await connection.execute(`
      CREATE TABLE handover_points (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        handover_id NUMBER REFERENCES shift_handovers(id) ON DELETE CASCADE,
        point_text VARCHAR2(1000) NOT NULL,
        point_order NUMBER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Handover points table created');

    // Leave requests table
    await connection.execute(`
      CREATE TABLE leave_requests (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id NUMBER REFERENCES users(id),
        user_name VARCHAR2(255) NOT NULL,
        user_email VARCHAR2(255) NOT NULL,
        leave_date DATE NOT NULL,
        leave_type VARCHAR2(50) NOT NULL,
        reason CLOB NOT NULL,
        status VARCHAR2(20) DEFAULT 'pending',
        approved_by VARCHAR2(255),
        approved_at TIMESTAMP,
        admin_reason CLOB,
        requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Leave requests table created');

    // Role permissions table
    await connection.execute(`
      CREATE TABLE role_permissions (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        role VARCHAR2(50) NOT NULL,
        page VARCHAR2(100) NOT NULL,
        access_level VARCHAR2(50) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(role, page)
      )
    `);
    console.log('‚úì Role permissions table created');

    // User sessions table
    await connection.execute(`
      CREATE TABLE user_sessions (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id NUMBER REFERENCES users(id),
        email VARCHAR2(255) NOT NULL,
        login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        logout_time TIMESTAMP,
        session_duration NUMBER,
        ip_address VARCHAR2(45),
        user_agent VARCHAR2(500),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì User sessions table created');

    // Create indexes for better performance
    await connection.execute('CREATE INDEX idx_users_email ON users(email)');
    await connection.execute('CREATE INDEX idx_tasks_date ON daily_tasks(task_date)');
    await connection.execute('CREATE INDEX idx_tasks_status ON daily_tasks(status)');
    await connection.execute('CREATE INDEX idx_leave_user ON leave_requests(user_id)');
    await connection.execute('CREATE INDEX idx_leave_date ON leave_requests(leave_date)');
    await connection.execute('CREATE INDEX idx_handover_date ON shift_handovers(handover_date)');
    
    console.log('‚úì Database indexes created');

    // Insert default role permissions
    await insertDefaultPermissions(connection);

    console.log('üéâ Database schema created successfully!');
    
  } catch (err: any) {
    if (err.errorNum === 955) {
      console.log('‚ö†Ô∏è  Tables already exist, skipping creation');
    } else {
      console.error('Error creating database schema:', err);
      throw err;
    }
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('Error closing connection:', err);
      }
    }
  }
}

async function insertDefaultPermissions(connection: any) {
  const defaultPermissions = [
    // Admin permissions
    { role: 'Admin', page: 'dashboard', access: 'full' },
    { role: 'Admin', page: 'daily-tracker', access: 'full' },
    { role: 'Admin', page: 'shift-handover', access: 'full' },
    { role: 'Admin', page: 'all-users-data', access: 'full' },
    { role: 'Admin', page: 'others', access: 'full' },
    
    // Manager permissions
    { role: 'Manager', page: 'dashboard', access: 'full' },
    { role: 'Manager', page: 'daily-tracker', access: 'full' },
    { role: 'Manager', page: 'shift-handover', access: 'full' },
    { role: 'Manager', page: 'all-users-data', access: 'read' },
    { role: 'Manager', page: 'others', access: 'read' },
    
    // Production Support permissions
    { role: 'Production Support', page: 'dashboard', access: 'full' },
    { role: 'Production Support', page: 'daily-tracker', access: 'full' },
    { role: 'Production Support', page: 'shift-handover', access: 'full' },
    { role: 'Production Support', page: 'all-users-data', access: 'none' },
    { role: 'Production Support', page: 'others', access: 'none' },
    
    // UAT Support permissions
    { role: 'UAT Support', page: 'dashboard', access: 'full' },
    { role: 'UAT Support', page: 'daily-tracker', access: 'full' },
    { role: 'UAT Support', page: 'shift-handover', access: 'none' },
    { role: 'UAT Support', page: 'all-users-data', access: 'none' },
    { role: 'UAT Support', page: 'others', access: 'none' },
    
    // Developer permissions
    { role: 'Developer', page: 'dashboard', access: 'full' },
    { role: 'Developer', page: 'daily-tracker', access: 'full' },
    { role: 'Developer', page: 'shift-handover', access: 'none' },
    { role: 'Developer', page: 'all-users-data', access: 'none' },
    { role: 'Developer', page: 'others', access: 'none' },
  ];

  for (const perm of defaultPermissions) {
    try {
      await connection.execute(
        `INSERT INTO role_permissions (role, page, access_level) VALUES (:role, :page, :access)`,
        perm
      );
    } catch (err: any) {
      if (err.errorNum !== 1) { // Ignore unique constraint violations
        console.error('Error inserting permission:', err);
      }
    }
  }
  
  await connection.commit();
  console.log('‚úì Default permissions inserted');
}

export async function dropTables() {
  let connection;
  
  try {
    connection = await getConnection();
    
    console.log('Dropping database tables...');

    const tables = [
      'user_sessions',
      'role_permissions', 
      'leave_requests',
      'handover_points',
      'shift_handovers',
      'daily_tasks',
      'users'
    ];

    for (const table of tables) {
      try {
        await connection.execute(`DROP TABLE ${table} CASCADE CONSTRAINTS`);
        console.log(`‚úì Dropped table: ${table}`);
      } catch (err: any) {
        if (err.errorNum === 942) {
          console.log(`‚ö†Ô∏è  Table ${table} does not exist`);
        } else {
          console.error(`Error dropping table ${table}:`, err);
        }
      }
    }

    console.log('üóëÔ∏è  Database tables dropped successfully!');
    
  } catch (err: any) {
    console.error('Error dropping database tables:', err);
    throw err;
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('Error closing connection:', err);
      }
    }
  }
}
